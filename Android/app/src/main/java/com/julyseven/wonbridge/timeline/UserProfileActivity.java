package com.julyseven.wonbridge.timeline;import android.Manifest;import android.content.Intent;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.MotionEvent;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.baidu.mapapi.model.LatLng;import com.baidu.mapapi.search.core.SearchResult;import com.baidu.mapapi.search.geocode.GeoCodeResult;import com.baidu.mapapi.search.geocode.GeoCoder;import com.baidu.mapapi.search.geocode.OnGetGeoCoderResultListener;import com.baidu.mapapi.search.geocode.ReverseGeoCodeOption;import com.baidu.mapapi.search.geocode.ReverseGeoCodeResult;import com.bumptech.glide.Glide;import com.julyseven.wonbridge.Chatting.GroupChattingActivity;import com.julyseven.wonbridge.R;import com.julyseven.wonbridge.WonBridgeApplication;import com.julyseven.wonbridge.adapter.UserInfoImageAdapter;import com.julyseven.wonbridge.base.CommonActivity;import com.julyseven.wonbridge.commons.Commons;import com.julyseven.wonbridge.commons.Constants;import com.julyseven.wonbridge.commons.ReqConst;import com.julyseven.wonbridge.model.FriendEntity;import com.julyseven.wonbridge.model.RoomEntity;import com.julyseven.wonbridge.model.UserEntity;import com.julyseven.wonbridge.utils.Database;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;public class UserProfileActivity extends CommonActivity implements View.OnClickListener, OnGetGeoCoderResultListener {    private UserEntity _user;    private FriendEntity _otherUser = new FriendEntity();    private LinearLayout ui_lytChatting, ui_lytFreeCall, ui_lytGift, ui_lytVideoCall, ui_lytRemoveFriend;    private TextView ui_txvTitle, ui_txvUsername, ui_txvAddDeleteFriend, ui_txvLastLogin, ui_txvFriendState, ui_txvRegDate, ui_txvAddress, ui_txvPhoneCall, ui_txvVideoCall, ui_txvMessage, ui_txvCountry;    private ImageView ui_imvProfile, ui_imvFlag, ui_imvAddDeleteFriend, ui_imvVideoCall, ui_imvPhoneCall, ui_imvMessage, ui_imvSex;    private TextView ui_txvSchool, ui_txvVillage, ui_txvWorking, ui_txvInterest;    RecyclerView ui_recyclerImage;    UserInfoImageAdapter _imageAdapter;    GeoCoder _geoCoder = null;    String _address = "";    ArrayList<String> _imageUrls = new ArrayList<>();    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_user_profile);        _user = Commons.g_user;        FriendEntity friendEntity = (FriendEntity) getIntent().getSerializableExtra(Constants.KEY_FRIEND);        if (friendEntity != null) {             _otherUser = friendEntity;            getOtherInfo(_otherUser.get_idx());        }        if (Commons.g_isChina) {            _geoCoder = GeoCoder.newInstance();            _geoCoder.setOnGetGeoCodeResultListener(this);        }        loadLayout();    }    private void loadLayout() {        ui_txvUsername = (TextView) findViewById(R.id.txv_username);        ui_imvSex = (ImageView) findViewById(R.id.imv_sex);        ui_imvSex.setVisibility(View.INVISIBLE);        ui_imvProfile = (ImageView) findViewById(R.id.imv_photo);        ui_imvProfile.setOnClickListener(this);        ui_imvFlag = (ImageView) findViewById(R.id.imv_flag);        ui_txvLastLogin = (TextView) findViewById(R.id.txv_lastLogin);        ui_txvFriendState = (TextView) findViewById(R.id.txv_friendState);        ui_txvRegDate = (TextView) findViewById(R.id.txv_regDate);        ui_txvAddress = (TextView) findViewById(R.id.txv_location);        ui_txvCountry = (TextView) findViewById(R.id.txv_country);        ImageView imvBack  = (ImageView)findViewById(R.id.imv_back);        imvBack.setOnClickListener(this);        ui_lytChatting = (LinearLayout)findViewById(R.id.lyt_chatting);        ui_lytChatting.setOnClickListener(this);        ui_imvMessage = (ImageView) findViewById(R.id.imv_message);        ui_txvMessage = (TextView) findViewById(R.id.txv_message);        ui_lytFreeCall = (LinearLayout)findViewById(R.id.lyt_freeCall);        ui_lytFreeCall.setOnClickListener(this);        ui_imvPhoneCall = (ImageView) findViewById(R.id.imv_phone_call);        ui_txvPhoneCall = (TextView) findViewById(R.id.txv_phone_call);        ui_lytGift = (LinearLayout)findViewById(R.id.lyt_gift);        ui_lytGift.setOnClickListener(this);        ui_lytRemoveFriend = (LinearLayout)findViewById(R.id.lyt_delFriend);        ui_lytRemoveFriend.setOnClickListener(this);        ui_lytVideoCall = (LinearLayout)findViewById(R.id.lyt_videoChat);        ui_lytVideoCall.setOnClickListener(this);        ui_imvVideoCall = (ImageView) findViewById(R.id.imv_video_call);        ui_txvVideoCall = (TextView) findViewById(R.id.txv_video_call);        ui_txvTitle = (TextView)findViewById(R.id.txv_profile_title);        ui_imvAddDeleteFriend = (ImageView) findViewById(R.id.imv_adddelete_friend);        ui_txvAddDeleteFriend = (TextView) findViewById(R.id.txv_adddelete_friend);        ui_txvSchool = (TextView) findViewById(R.id.txv_school);        ui_txvVillage = (TextView) findViewById(R.id.txv_village);        ui_txvWorking = (TextView) findViewById(R.id.txv_working);        ui_txvInterest = (TextView) findViewById(R.id.txv_interest);        LinearLayout lytActivity = (LinearLayout) findViewById(R.id.lyt_activity);        lytActivity.setOnClickListener(this);        ui_recyclerImage = (RecyclerView) findViewById(R.id.recycler_image);        LinearLayoutManager layoutManager1 = new LinearLayoutManager(                this, LinearLayoutManager.HORIZONTAL, false);        ui_recyclerImage.setLayoutManager(layoutManager1);        ui_recyclerImage.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_UP) {                    gotoTimelineList();                }                return false;            }        });        _imageAdapter = new UserInfoImageAdapter(this);        ui_recyclerImage.setAdapter(_imageAdapter);    }    public void getOtherInfo(int idx) {        String url = ReqConst.SERVER_URL + ReqConst.REQ_GETUSERINFOBYID;        String params = String.format("/%d/%d", _user.get_idx(), idx);        url += params;        StringRequest stringRequest = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {            @Override            public void onResponse(String json) {                parseFriendInfoResponse(json);            }        }, new Response.ErrorListener(){            @Override            public void onErrorResponse(VolleyError error) {            }        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(Constants.VOLLEY_TIME_OUT,                0, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        WonBridgeApplication.getInstance().addToRequestQueue(stringRequest, url);    }    public void parseFriendInfoResponse(String json){        try{            JSONObject response = new JSONObject(json);            int result_code = response.getInt(ReqConst.RES_CODE);            if (result_code == ReqConst.CODE_SUCCESS){                JSONObject jsonOther = response.getJSONObject(ReqConst.RES_USERINFO);                FriendEntity other = new FriendEntity();                other.set_idx(jsonOther.getInt(ReqConst.RES_IDX));                other.set_name(jsonOther.getString(ReqConst.RES_NAME));                other.set_label(jsonOther.getString(ReqConst.RES_LABEL));                other.set_photoUrl(jsonOther.getString(ReqConst.RES_PHOTO_URL));                other.set_bgUrl(jsonOther.getString(ReqConst.RES_BG_URL));                other.set_lastLogin(jsonOther.getString(ReqConst.RES_LASTLOGIN));                other.set_regDate(jsonOther.getString(ReqConst.RES_REGTIME));                other.set_sex(jsonOther.getInt(ReqConst.RES_SEX));                other.set_isFriend(jsonOther.getInt(ReqConst.RES_ISFRIEND) == 1);                other.set_latitude((float) jsonOther.getDouble(ReqConst.RES_LATITUDE));                other.set_longitude((float) jsonOther.getDouble(ReqConst.RES_LONGITUDE));                other.set_country(jsonOther.getString(ReqConst.RES_COUNTRY));                other.set_school(jsonOther.getString(ReqConst.RES_SCHOOL));                other.set_village(jsonOther.getString(ReqConst.RES_VILLAGE));                other.set_country2(jsonOther.getString(ReqConst.RES_COUNTRY2));                other.set_working(jsonOther.getString(ReqConst.RES_WORKING));                other.set_interest(jsonOther.getString(ReqConst.RES_INTEREST));                JSONArray fileurls = jsonOther.getJSONArray(ReqConst.RES_TIMELINE);                _imageUrls.clear();                for (int i = 0; i < fileurls.length(); i++) {                    _imageUrls.add(fileurls.getString(i));                }                _otherUser = other;                updateUserInfo();            }        }catch (JSONException e){            e.printStackTrace();            showAlertDialog(getString(R.string.error));        }    }    public void updateUserInfo() {        ui_txvTitle.setText(_otherUser.get_name() + " " + getString(R.string.deprofile));        ui_txvUsername.setText(_otherUser.get_name());        ui_imvSex.setSelected(_otherUser.get_sex() == 1);        ui_imvSex.setVisibility(View.VISIBLE);        ui_txvCountry.setText(Commons.getCountryName(_otherUser.get_country2()));        String pngName = "ic_flag_flat_" + _otherUser.get_country2().trim().toLowerCase();        ui_imvFlag.setImageResource(_context.getResources().getIdentifier("drawable/" + pngName, null, _context.getPackageName()));        try {            Glide.with(this).load(_otherUser.get_photoUrl()).placeholder(R.drawable.img_user).error(R.drawable.img_user).into(ui_imvProfile);        } catch (Exception ex) {            ex.printStackTrace();        }        if (_otherUser.is_isFriend()) {            ui_txvAddDeleteFriend.setText(R.string.delete_friend);            ui_imvAddDeleteFriend.setSelected(true);            if (!_user.isBlockUser(_otherUser))                enableChatting(true);            else                enableChatting(false);        } else {            ui_txvAddDeleteFriend.setText(R.string.add_friend);            ui_imvAddDeleteFriend.setSelected(false);            enableChatting(false);        }        ui_txvLastLogin.setText(Commons.getDisplayLocalTimeString(_otherUser.get_lastLogin()));        ui_txvRegDate.setText(Commons.getDisplayRegTimeString(_otherUser.get_regDate()));        if (!Commons.g_isChina) {            _address = "";            new AsyncTask<Void, Void, Void>() {                @Override                protected Void doInBackground(Void... params) {                    // We send the message here.                    // You should also check if the username is valid here.                    try {                        getAddress();                    } catch (Exception e) {                    }                    return null;                }                @Override                protected void onPostExecute(Void aVoid) {                    super.onPostExecute(aVoid);                    ui_txvAddress.setText(_address);                }            }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);        } else {            _geoCoder.reverseGeoCode(new ReverseGeoCodeOption()                    .location(new LatLng(_otherUser.get_latitude(), _otherUser.get_longitude())));        }        if (_otherUser.is_isFriend())            ui_txvFriendState.setText(getString(R.string.friend_state));        else            ui_txvFriendState.setText("");        ui_txvSchool.setText(_otherUser.get_school());        ui_txvVillage.setText(_otherUser.get_village());        ui_txvWorking.setText(_otherUser.get_working());        ui_txvInterest.setText(_otherUser.get_interest());        _imageAdapter.setDatas(_imageUrls);    }    public void getAddress() {        _address = Commons.getGeoLocation(UserProfileActivity.this, _otherUser.get_latitude(), _otherUser.get_longitude());    }    public void deleteFriend() {        String url = ReqConst.SERVER_URL + ReqConst.REQ_DELETEFRIEND;        String params = String.format("/%d/%d", _user.get_idx(), _otherUser.get_idx());        url += params;        StringRequest stringRequest = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {            @Override            public void onResponse(String json) {                parseDeleteResponse(json);            }        }, new Response.ErrorListener(){            @Override            public void onErrorResponse(VolleyError error) {            }        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(Constants.VOLLEY_TIME_OUT,                0, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        WonBridgeApplication.getInstance().addToRequestQueue(stringRequest, url);    }    public void parseDeleteResponse(String json){        try{            JSONObject response = new JSONObject(json);            int result_code = response.getInt(ReqConst.RES_CODE);            if (result_code == ReqConst.CODE_SUCCESS){                _otherUser.set_isFriend(false);                if (_user.get_friendList().contains(_otherUser)) {                    _user.get_friendList().remove(_otherUser);                    Database.deleteFriend(_otherUser.get_idx());                }                showAlertDialog(getString(R.string.success_delete_friend));                updateUserInfo();            }        }catch (JSONException e){            e.printStackTrace();            showAlertDialog(getString(R.string.error));        }    }    public void makeFriend() {        String url = ReqConst.SERVER_URL + ReqConst.REQ_MAKEFRIEND;        String params = String.format("/%d/%d", _user.get_idx(), _otherUser.get_idx());        url += params;        StringRequest stringRequest = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {            @Override            public void onResponse(String json) {                parseMakeResponse(json);            }        }, new Response.ErrorListener(){            @Override            public void onErrorResponse(VolleyError error) {            }        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(Constants.VOLLEY_TIME_OUT,                0, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));        WonBridgeApplication.getInstance().addToRequestQueue(stringRequest, url);    }    public void parseMakeResponse(String json){        try{            JSONObject response = new JSONObject(json);            int result_code = response.getInt(ReqConst.RES_CODE);            if (result_code == ReqConst.CODE_SUCCESS){                _otherUser.set_isFriend(true);                if (!_user.get_friendList().contains(_otherUser)) {                    _user.get_friendList().add(_otherUser);                    Database.createFriend(_otherUser.get_idx());                }                updateUserInfo();                gotoFriendRequestChatting();            }        }catch (JSONException e){            e.printStackTrace();            showAlertDialog(getString(R.string.error));        }    }    public void gotoFriendRequestChatting() {        RoomEntity room = makeRoom();        Intent intent = new Intent(_context, GroupChattingActivity.class);        intent.putExtra(Constants.KEY_ROOM, room.get_name());        intent.putExtra(Constants.KEY_FRIENDREQUEST, true);        startActivity(intent);        finish();    }    public void onChatting() {        if (!ui_txvMessage.isSelected())            return;        gotoChattingActivity();    }    public void gotoChattingActivity(){        RoomEntity room = makeRoom();        Intent intent = new Intent(_context, GroupChattingActivity.class);        intent.putExtra(Constants.KEY_ROOM, room.get_name());        startActivity(intent);        finish();    }    public RoomEntity makeRoom() {        ArrayList<FriendEntity> participants = new ArrayList<FriendEntity>();        participants.add(_otherUser);        RoomEntity room = new RoomEntity(participants);        if (!_user.get_roomList().contains(room)) {            _user.get_roomList().add(room);            Database.createRoom(room);        }        return room;    }    public void onVideoCall() {        if (!ui_txvVideoCall.isSelected())            return;        String[] PERMISSIONS = {Manifest.permission.MODIFY_AUDIO_SETTINGS, Manifest.permission.RECORD_AUDIO, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA};        if (Commons.hasPermissions(this, PERMISSIONS)){            Commons.g_xmppService.sendVideoRequest(_otherUser.get_idx(), _otherUser.get_name(), true);        } else {            ActivityCompat.requestPermissions(this, PERMISSIONS, Constants.REQUST_PERMISSION);        }    }    public void onAudioCall() {        if (!ui_txvPhoneCall.isSelected())            return;        String[] PERMISSIONS = {Manifest.permission.MODIFY_AUDIO_SETTINGS, Manifest.permission.RECORD_AUDIO, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA};        if (Commons.hasPermissions(this, PERMISSIONS)){            Commons.g_xmppService.sendVideoRequest(_otherUser.get_idx(), _otherUser.get_name(), false);        } else {            ActivityCompat.requestPermissions(this, PERMISSIONS, Constants.REQUST_PERMISSION);        }    }    public void enableChatting(boolean enable) {        ui_imvPhoneCall.setSelected(enable);        ui_imvVideoCall.setSelected(enable);        ui_txvPhoneCall.setSelected(enable);        ui_txvVideoCall.setSelected(enable);        ui_txvMessage.setSelected(enable);        ui_imvMessage.setSelected(enable);    }    private void gotoTimelineList() {        Intent intent = new Intent(UserProfileActivity.this, TimelineListActivity.class);        intent.putExtra(Constants.KEY_USER_ID, _otherUser.get_idx());        intent.putExtra(Constants.KEY_USERNAME, _otherUser.get_name());        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);    }    @Override    public void onClick(View v) {        switch (v.getId()){            case R.id.imv_back:                finish();                break;            case R.id.lyt_activity:                gotoTimelineList();                break;            case R.id.lyt_chatting:                onChatting();                break;            case R.id.lyt_freeCall:                onAudioCall();                break;            case R.id.lyt_delFriend:                if (_otherUser.is_isFriend())                    deleteFriend();                else                    makeFriend();                break;            case R.id.lyt_videoChat:                onVideoCall();                break;            case R.id.lyt_gift:                break;        }    }    @Override    public void onGetReverseGeoCodeResult(ReverseGeoCodeResult result) {        if (result != null && result.error == SearchResult.ERRORNO.NO_ERROR) {            ui_txvAddress.setText(result.getAddress());        }    }    @Override    public void onGetGeoCodeResult(GeoCodeResult result) {        if (result == null || result.error != SearchResult.ERRORNO.NO_ERROR) {            return;        }    }}