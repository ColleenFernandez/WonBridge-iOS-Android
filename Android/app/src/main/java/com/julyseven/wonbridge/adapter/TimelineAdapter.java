package com.julyseven.wonbridge.adapter;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.net.Uri;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Spannable;import android.text.SpannableString;import android.text.style.ForegroundColorSpan;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.bumptech.glide.Glide;import com.julyseven.wonbridge.R;import com.julyseven.wonbridge.base.CommonActivity;import com.julyseven.wonbridge.commons.Commons;import com.julyseven.wonbridge.commons.Constants;import com.julyseven.wonbridge.timeline.TimelineAllTextActivity;import com.julyseven.wonbridge.timeline.TimelineDetailActivity;import com.julyseven.wonbridge.timeline.UserProfileActivity;import com.julyseven.wonbridge.model.FriendEntity;import com.julyseven.wonbridge.model.TimelineEntity;import java.util.ArrayList;/** * Created by GoldRain on 8/22/2016. */public class TimelineAdapter extends BaseAdapter{    private CommonActivity _context;    private ArrayList<TimelineEntity> _timelinePosts = new ArrayList<>();    public TimelineAdapter(CommonActivity context){        super();        this._context = context;    }    @Override    public int getCount() {        return _timelinePosts.size();    }    public Object getItem(int position){return _timelinePosts.get(position);}    public long getItemId(int position){return position;}    public View getView (int position, View convertView, ViewGroup parent){        final TimelineHolder timelineHolder;        if(convertView == null){            timelineHolder = new TimelineHolder();            LayoutInflater inflater = (LayoutInflater)_context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = inflater.inflate(R.layout.item_timeline_list, null);            timelineHolder.imvPhoto = (ImageView)convertView.findViewById(R.id.imv_userprofile);            timelineHolder.txvNickname = (TextView)convertView.findViewById(R.id.txv_nickname);            timelineHolder.txvTimeline = (TextView)convertView.findViewById(R.id.txv_timeline);            timelineHolder.txvTime = (TextView)convertView.findViewById(R.id.txv_time);            timelineHolder.txvDistance = (TextView)convertView.findViewById(R.id.txv_distance);            timelineHolder.imvLocation = (ImageView)convertView.findViewById(R.id.imv_location);            timelineHolder.txvChatCount = (TextView)convertView.findViewById(R.id.txv_msgCount);            timelineHolder.txvLikeCount = (TextView)convertView.findViewById(R.id.txv_likeCount);            timelineHolder.imvFlag = (ImageView) convertView.findViewById(R.id.imv_flag);            timelineHolder.imvFlag2 = (ImageView) convertView.findViewById(R.id.imv_flag2);            timelineHolder.txvTextAll = (TextView) convertView.findViewById(R.id.txv_alltext);            timelineHolder.lytTimelineContent = (LinearLayout) convertView.findViewById(R.id.lyt_timeline_content);            timelineHolder.lytResponse = (LinearLayout) convertView.findViewById(R.id.lyt_response);            timelineHolder.txvLikeUsers = (TextView) convertView.findViewById(R.id.txv_like_users);            timelineHolder.txvResponse1 = (TextView) convertView.findViewById(R.id.txv_response1);            timelineHolder.txvResponse2 = (TextView) convertView.findViewById(R.id.txv_response2);            timelineHolder.grd_images = (RecyclerView) convertView.findViewById(R.id.grid_timeline_image);            timelineHolder.txvLink = (TextView) convertView.findViewById(R.id.txv_link);            convertView.setTag(timelineHolder);        }else {            timelineHolder = (TimelineHolder)convertView.getTag();        }        final TimelineEntity timeline = _timelinePosts.get(position);        timelineHolder.txvNickname.setText(timeline.get_userName());        if (timeline.get_content().length() == 0) {            timelineHolder.txvTimeline.setVisibility(View.GONE);            timelineHolder.txvTextAll.setVisibility(View.GONE);        } else {            timelineHolder.txvTimeline.setVisibility(View.VISIBLE);            timelineHolder.txvTimeline.setText(timeline.get_content());            timelineHolder.txvTimeline.post(new Runnable() {                @Override                public void run() {                    int lines = timelineHolder.txvTimeline.getLineCount();                    if (lines > 3) {   // 3 lines in textview                        timelineHolder.txvTextAll.setVisibility(View.VISIBLE);                    } else {                        timelineHolder.txvTextAll.setVisibility(View.GONE);                    }                }            });        }        // noti        if (Commons.g_notiData != null && timeline.get_id() == 0) {            timelineHolder.txvLikeCount.setVisibility(View.GONE);            timelineHolder.txvChatCount.setVisibility(View.GONE);            timelineHolder.txvTime.setVisibility(View.GONE);            timelineHolder.txvDistance.setVisibility(View.GONE);            timelineHolder.imvLocation.setVisibility(View.GONE);            timelineHolder.imvFlag.setVisibility(View.GONE);            timelineHolder.imvFlag2.setVisibility(View.GONE);            timelineHolder.imvPhoto.setImageResource(R.mipmap.ic_launcher);            if (timeline.get_link().length() > 0) {                timelineHolder.txvLink.setVisibility(View.VISIBLE);            } else {                timelineHolder.txvLink.setVisibility(View.GONE);            }        } else {            timelineHolder.txvLikeCount.setVisibility(View.VISIBLE);            timelineHolder.txvChatCount.setVisibility(View.VISIBLE);            timelineHolder.txvTime.setVisibility(View.VISIBLE);            timelineHolder.txvDistance.setVisibility(View.VISIBLE);            timelineHolder.imvLocation.setVisibility(View.VISIBLE);            timelineHolder.imvFlag.setVisibility(View.VISIBLE);            timelineHolder.imvFlag2.setVisibility(View.VISIBLE);            timelineHolder.txvLink.setVisibility(View.GONE);            timelineHolder.txvLikeCount.setText(String.valueOf(timeline.get_likeCount()));            timelineHolder.txvChatCount.setText(String.valueOf(timeline.get_respondCount()));            timelineHolder.txvTime.setText(Commons.getDisplayLocalTimeString(timeline.get_writeTime()));            timelineHolder.txvDistance.setText(String.valueOf(timeline.getDistance(_context)) + "km");            String pngName = "ic_flag_flat_" + timeline.get_country().trim().toLowerCase();            timelineHolder.imvFlag.setImageResource(_context.getResources().getIdentifier("drawable/" + pngName, null, _context.getPackageName()));            if (timeline.get_country2().length() > 0) {                pngName = "ic_flag_flat_" + timeline.get_country2().trim().toLowerCase();                timelineHolder.imvFlag2.setImageResource(_context.getResources().getIdentifier("drawable/" + pngName, null, _context.getPackageName()));            } else {                timelineHolder.imvFlag2.setVisibility(View.GONE);            }            Glide.with(_context).load(timeline.get_userProfile()).placeholder(R.drawable.img_user).error(R.drawable.img_user).into(timelineHolder.imvPhoto);        }        timelineHolder.imvPhoto.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (timeline.get_id() != 0)                    gotoUserProfile(timeline);            }        });        if (timeline.get_2responds().size() + timeline.get_likeUsernames().size() == 0) {            timelineHolder.lytResponse.setVisibility(View.GONE);        } else {            timelineHolder.lytResponse.setVisibility(View.VISIBLE);        }        if (timeline.get_likeUsernames().size() == 0) {            timelineHolder.txvLikeUsers.setVisibility(View.GONE);        }else {            timelineHolder.txvLikeUsers.setVisibility(View.VISIBLE);            String allnames = "";            for (String name : timeline.get_likeUsernames()) {                allnames += name + ", ";            }            timelineHolder.txvLikeUsers.setText(allnames.substring(0, allnames.length() - 2));        }        if (timeline.get_2responds().size() == 0) {            timelineHolder.txvResponse1.setVisibility(View.GONE);            timelineHolder.txvResponse2.setVisibility(View.GONE);        } else {            timelineHolder.txvResponse1.setVisibility(View.VISIBLE);            String name1 = timeline.get_2responds().get(0).get_userName();            String content1 = timeline.get_2responds().get(0).get_content();            Spannable wordtoSpan1 = new SpannableString(name1 + " : " + content1);            wordtoSpan1.setSpan(new ForegroundColorSpan(Color.parseColor("#ff5b5b5b")), name1.length() + 1, wordtoSpan1.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);            timelineHolder.txvResponse1.setText(wordtoSpan1);            if (timeline.get_2responds().size() > 1) {                timelineHolder.txvResponse2.setVisibility(View.VISIBLE);                String name2 = timeline.get_2responds().get(1).get_userName();                String content2 = timeline.get_2responds().get(1).get_content();                Spannable wordtoSpan2 = new SpannableString(name2 + " : " + content2);                wordtoSpan2.setSpan(new ForegroundColorSpan(Color.parseColor("#ff5b5b5b")), name2.length() + 1, wordtoSpan2.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);                timelineHolder.txvResponse2.setText(wordtoSpan2);            } else {                timelineHolder.txvResponse2.setVisibility(View.GONE);            }        }        if (timeline.get_fileUrls().size() == 0) {            timelineHolder.grd_images.setVisibility(View.GONE);        } else {            timelineHolder.grd_images.setVisibility(View.VISIBLE);            TimelineImageGridAdapter adapter = new TimelineImageGridAdapter(_context, timeline);            timelineHolder.grd_images.setAdapter(adapter);            timelineHolder.grd_images.setLayoutManager(new GridLayoutManager(_context, 3));            timelineHolder.grd_images.getLayoutParams().height = Commons.GetPixelValueFromDp(_context, 100) * ((timeline.get_fileUrls().size() - 1) / 3 + 1);            adapter.setDatas(timeline.get_fileUrls());        }        timelineHolder.txvTimeline.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (timeline.get_content().length() >= 100)                    gotoAllText(timeline);                else {                    if (timeline.get_id() != 0)                        gotoTimelineDetail(timeline);                }            }        });        timelineHolder.txvTextAll.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                timelineHolder.txvTextAll.setSelected(!timelineHolder.txvTextAll.isSelected());                if (timelineHolder.txvTextAll.isSelected()) { // close all text                    timelineHolder.txvTextAll.setText(_context.getString(R.string.content_close));                    timelineHolder.txvTimeline.setMaxLines(Integer.MAX_VALUE);                } else {                    timelineHolder.txvTextAll.setText(_context.getString(R.string.content_all));                    timelineHolder.txvTimeline.setMaxLines(3);                }            }        });        timelineHolder.lytTimelineContent.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (timeline.get_id() != 0)                    gotoTimelineDetail(timeline);            }        });        timelineHolder.txvLink.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String url = timeline.get_link();                if (!url.startsWith("http://") && !url.startsWith("https://"))                    url = "http://" + url;                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));                _context.startActivity(browserIntent);            }        });        return convertView;    }    public void setDatas(ArrayList<TimelineEntity> data) {        _timelinePosts = data;        notifyDataSetChanged();    }    public void gotoUserProfile(TimelineEntity timeline) {        if (timeline.get_userId() == Commons.g_user.get_idx()) {            //_context.gotoMyPage();        } else {            Intent intent = new Intent(_context, UserProfileActivity.class);            FriendEntity friendEntity = new FriendEntity();            friendEntity.set_idx(timeline.get_userId());            friendEntity.set_name(timeline.get_userName());            friendEntity.set_photoUrl(timeline.get_userProfile());            intent.putExtra(Constants.KEY_FRIEND, friendEntity);            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);            _context.startActivity(intent);        }    }    public void gotoTimelineDetail(TimelineEntity timeline) {        Intent intent = new Intent(_context, TimelineDetailActivity.class);        intent.putExtra(Constants.KEY_TIMELINE, timeline);        _context.startActivity(intent);    }    public void gotoAllText(TimelineEntity timeline) {        Intent intent = new Intent(_context, TimelineAllTextActivity.class);        intent.putExtra(Constants.KEY_TIMELINE, timeline);        _context.startActivityForResult(intent, Constants.PICK_FROM_ALLTEXT);    }    public class TimelineHolder {        public TextView txvTimeline, txvTime, txvDistance, txvLink,            txvLikeCount, txvChatCount, txvNickname, txvTextAll, txvLikeUsers, txvResponse1, txvResponse2;        public ImageView imvPhoto, imvFlag, imvLocation, imvFlag2;        public LinearLayout lytTimelineContent, lytResponse;        public RecyclerView grd_images;    }}